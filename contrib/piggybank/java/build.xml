<!--
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
-->

<project basedir="." default="jar" name="pigudf"
         xmlns:artifact="urn:maven-artifact-ant"
         xmlns:ivy="antlib:org.apache.ivy.ant">
    <taskdef resource="net/sf/antcontrib/antcontrib.properties">
        <classpath>
            <pathelement location="../../../cloudera/maven-packaging/lib/ant-contrib-1.0b3.jar"/>
        </classpath>
    </taskdef>

    <property file="../../../build.properties" />
    <!-- javac properties -->
    <property name="javac.debug" value="on" />
    <property name="javac.level" value="source,lines,vars"/>
    <property name="javac.optimize" value="on" />
    <property name="javac.deprecation" value="off" />
    <property name="javac.version" value="1.6" />
    <property name="javac.args" value="" />
    <!-- TODO we should use warning...   <property name="javac.args.warnings" value="-Xlint:unchecked" /> -->
    <property name="javac.args.warnings" value="" />
    <property name="build.encoding" value="UTF8" />

    <!-- build properties -->
    <property name="build.dir" value="${basedir}/build" />
    <property name="build.classes" value="${build.dir}/classes" />
    <property name="build.docs" value="${build.dir}/docs" />
    <property name="build.javadoc" value="${build.docs}/api" />
    <property name="pigjar" value="../../../pig.jar" />
    <property name="pigjar-withouthadoop" value="../../../pig-withouthadoop.jar" />
    <property name="pigtest" value="../../../build/test/classes" />
    <property name="udfjar" value="piggybank.jar" />
    <property name="src.dir" value="src/main/java/org/apache/pig/piggybank" />
    <property name="hsqldb.jar" value="../../../build/ivy/lib/Pig/hsqldb-1.8.0.10.jar"/>

    <property name="src.shims.dir" value="../../../shims/src/hadoop${hadoopversion}" />
    <if>
        <equals arg1="${mr1.test}" arg2="mr1"/>
        <then>
            <property name="src.shims.test.dir" value="../../../shims/test/hadoop20" />
        </then>
        <else>
            <property name="src.shims.test.dir" value="../../../shims/test/hadoop${hadoopversion}" />
        </else>
    </if>

	<!-- JobHistoryLoader currently does not support 0.23 -->
    <condition property="build.classes.excludes" value="**/HadoopJobHistoryLoader.java" else="">
        <equals arg1="${hadoopversion}" arg2="23"/>
    </condition>
    <condition property="test.classes.excludes" value="**/TestHadoopJobHistoryLoader.java" else="">
        <equals arg1="${hadoopversion}" arg2="23"/>
    </condition>
	
    <!-- jar properties -->
    <property name=".javadoc" value="${build.docs}/api" />
    
    <!-- test properties -->
    <property name="test.build.dir" value="${build.dir}/test" />
    <property name="test.classes" value="${test.build.dir}/classes" />
    <property name="test.logs" value="${test.build.dir}/logs" />
    <property name="test.timeout" value="900000" />
    <property name="test.junit.output.format" value="plain" />
    <property name="test.src.dir" value="src/test/java" />

    <property name="ivy.dir" location="../../../ivy" />
    <property name="build.ivy.dir" location="${build.dir}/ivy" />
    <property name="build.ivy.lib.dir" location="${build.ivy.dir}/lib" />
    <property name="ivy.lib.dir" location="${build.ivy.lib.dir}/${ant.project.name}"/>
    <property name="build.ivy.report.dir" location="${build.ivy.dir}/report" />
    <property name="build.ivy.maven.dir" location="${build.ivy.dir}/maven" />
    <property name="build.ivy.maven.pom" location="${build.ivy.maven.dir}/pig-${version}.pom" />
    <property name="build.ivy.maven.jar" location="${build.ivy.maven.dir}/pig-${version}-core.jar" />

    <loadproperties srcfile="${ivy.dir}/libraries.properties"/>
    <property name="ivysettings.xml" location="${ivy.dir}/ivysettings.xml" />
    <property name="ivy.jar" location="${ivy.dir}/ivy-${ivy.version}.jar"/>
    <property name="mvnrepo" value="http://repo2.maven.org/maven2"/>
    <property name="ivy_repo_url" value="${mvnrepo}/org/apache/ivy/ivy/${ivy.version}/ivy-${ivy.version}.jar"/>

    <target name="ivy-init-dirs">
        <mkdir dir="${build.ivy.dir}" />
        <mkdir dir="${build.ivy.lib.dir}" />
        <mkdir dir="${build.ivy.report.dir}" />
        <mkdir dir="${build.ivy.maven.dir}" />
        <copy todir="${basedir}/" file="../../../ivy.xml" />
    </target>

    <target name="ivy-probe-antlib" >
        <condition property="ivy.found">
          <typefound uri="antlib:org.apache.ivy.ant" name="cleancache"/>
        </condition>
    </target>

    <target name="ivy-download" description="To download ivy" unless="offline">
        <get src="${ivy_repo_url}" dest="${ivy.jar}" usetimestamp="true"/>
    </target>

    <!--
    To avoid Ivy leaking things across big projects, always load Ivy in the same classloader.
    Also note how we skip loading Ivy if it is already there, just to make sure all is well.
    -->
    <target name="ivy-init-antlib" depends="ivy-download,ivy-init-dirs,ivy-probe-antlib" unless="ivy.found">
       <typedef uri="antlib:org.apache.ivy.ant" onerror="fail" loaderRef="ivyLoader">
         <classpath>
            <pathelement location="${ivy.jar}"/>
         </classpath>
       </typedef>
       <fail>
         <condition >
           <not>
             <typefound uri="antlib:org.apache.ivy.ant" name="cleancache"/>
           </not>
         </condition>
         You need Apache Ivy 2.0 or later from http://ant.apache.org/
         It could not be loaded from ${ivy_repo_url}
       </fail>
    </target>

    <target name="ivy-init" depends="ivy-init-antlib" >
       <ivy:configure settingsid="${ant.project.name}.ivy.settings" file="${ivysettings.xml}" override='false'/>
    </target>

    <target name="ivy-mr1-test" depends="ivy-init" description="Resolve, Retrieve Ivy-managed artifacts for test configuration" if="mr1.test">
       <ivy:resolve settingsRef="${ant.project.name}.ivy.settings" conf="test"/>
       <ivy:retrieve settingsRef="${ant.project.name}.ivy.settings"
                 pattern="${build.ivy.lib.dir}/mr1/${ivy.artifact.retrieve.pattern}" conf="mr1.test"/>
       <ivy:cachepath pathid="mr1.test.classpath" conf="mr1.test" type="jar,test-jar"/>
    </target>

    <if>
      <equals arg1="${mr1.test}" arg2="mr1"/>
      <then>
        <path id="pigudf.classpath">
            <pathelement location="../../../build/classes"/>
            <pathelement location="${build.classes}"/>
            <pathelement location="${pigjar-withouthadoop}"/>
            <pathelement location="${pigtest}"/>
            <fileset dir="../../../build/ivy/lib">
                <include name="**/*.jar"/>
                <exclude name="hadoop-mapreduce*.jar" />
                <exclude name="hadoop-yarn*.jar" />
            </fileset>
            <path refid="mr1.test.classpath"/>
        </path>
      </then>
      <else>
        <path id="pigudf.classpath">
            <pathelement location="../../../build/classes"/>
            <pathelement location="${build.classes}"/>
            <pathelement location="${pigjar-withouthadoop}"/>
            <pathelement location="${pigtest}"/>
            <fileset dir="../../../build/ivy/lib">
                <include name="**/*.jar"/>
            </fileset>
        </path>
      </else>
    </if>

    <path id="test.classpath">
        <pathelement location="${udfjar}"/>
        <pathelement location="${build.classes}"/>
        <pathelement location="${test.classes}"/>
        <pathelement location="${test.src.dir}"/>
        <path refid="pigudf.classpath"/>
    </path>

    <target name="init">
        <mkdir dir="${build.dir}"/>
        <mkdir dir="${build.classes}"/>
        <mkdir dir="${test.build.dir}"/>
        <mkdir dir="${test.classes}"/>
        <mkdir dir="${build.javadoc}"/>
    </target>
    <target name="clean">
        <delete dir="build"/>
        <delete file="${udfjar}"/>
    </target>
    <target depends="init, ivy-mr1-test" name="compile" description="compile all of the class files">
        <echo> *** Compiling Pig UDFs ***</echo>
        <javac srcdir="${src.dir}" debug="${javac.debug}" debuglevel="${javac.level}" destdir="${build.classes}" source="${javac.version}"
        target="${javac.version}" optimize="${javac.optimize}" deprecation="${javac.deprecation}" excludes="${build.classes.excludes}" encoding="${build.encoding}">
            <compilerarg line="${javac.args} ${javac.args.warnings}" />
            <classpath refid="pigudf.classpath"/>
        </javac>
    </target>
    <target depends="init,compile" name="jar" description="create the jar files">
        <echo> *** Creating pigudf.jar ***</echo>
      <jar destfile="${udfjar}">
        <fileset dir="build/classes"/>
      </jar>
    </target>
    <target depends="compile" name="compile-test">
        <echo> *** Compiling UDF tests ***</echo>
        <javac srcdir="${test.src.dir}" debug="${javac.debug}" debuglevel="${javac.level}" destdir="${test.classes}" source="${javac.version}"
        	target="${javac.version}" excludes="${test.classes.excludes}">
            <compilerarg line="${javac.args} ${javac.args.warnings}"/>
            <classpath refid="pigudf.classpath"/>
        </javac>
    </target>
    <target depends="compile-test,jar" name="test">
        <echo> *** Running UDF tests ***</echo>
        <delete dir="${test.logs}"/>
        <mkdir dir="${test.logs}"/>
        <tempfile property="junit.tmp.dir" prefix="piggybank_junit_tmp" destDir="${user.dir}/build/test" />
        <mkdir dir="${junit.tmp.dir}/"/>
        <junit printsummary="yes" haltonfailure="no" fork="yes" maxmemory="512m" dir="${basedir}" timeout="${test.timeout}" errorProperty="tests.failed" failureProperty="tests.failed">        
            <sysproperty key="hadoop.log.dir" value="${test.logs}"/>
            <sysproperty key="java.io.tmpdir" value="${junit.tmp.dir}" />
            <env key="MALLOC_ARENA_MAX" value="4"/>
            <classpath refid="test.classpath"/>
            <formatter type="${test.junit.output.format}" />
            <batchtest fork="yes" todir="${test.logs}" unless="testcase">
                <fileset dir="${test.src.dir}">
                    <include name="**/*Test*.java" />
                    <exclude name="${test.classes.excludes}" />
                </fileset>
            </batchtest>
            <batchtest fork="yes" todir="${test.logs}" if="testcase">
                <fileset dir="${test.src.dir}" includes="**/${testcase}.java"/>
            </batchtest>
        </junit>
        <delete dir="${junit.tmp.dir}/"/>    	
        <fail if="tests.failed">Tests failed!</fail>
    </target>
    <target depends="init" name="javadoc"
            description="build javadoc for all of the packages">
        <echo> *** Creating Javadocs ***</echo>
      <javadoc destdir="build/javadoc"
               author="true">
        <fileset dir="${src.dir}/evaluation" includes="**/*.java"/>
        <fileset dir="${src.dir}/storage" includes="**/*.java"/>
        <fileset dir="${src.dir}/filtering" includes="**/*.java"/>
        <fileset dir="${src.dir}/grouping" includes="**/*.java"/>
        <fileset dir="${src.dir}/comparison" includes="**/*.java"/>
        <classpath refid="pigudf.classpath"/>
      </javadoc>
    </target>
    
</project>
